Description: Define DynamoDb table and its auto scaling
Resources:
  KeyValueStore:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "KeyValueStore"
      AttributeDefinitions: 
        -
          AttributeName: "key"
          AttributeType: "S"
        -
          AttributeName: "timestamp"
          AttributeType: "N"
      KeySchema: 
        -
          AttributeName: "key"
          KeyType: "HASH"
        -
          AttributeName: "timestamp"
          KeyType: "RANGE"
      # NOTE: May use PAY_PER_REQUEST in production for unpredictable usage.
      # Here I used PROVISIONED to stay within AWS Free tier.
      BillingMode: "PROVISIONED"
      ProvisionedThroughput: 
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      DeletionProtectionEnabled: true
      # NOTE: Should enable SSE in production.
      # However, to avoid charges on using AWS KMS, I disabled it here.
      # SSESpecification: 
      #   SSEEnabled: true
  
  # IAM Role for dynamodb table auto scaling
  ScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: "DynamoDbAndCloudWatchAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:UpdateTable
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:SetAlarmState
                  - cloudwatch:DeleteAlarms
                Resource: "*"

  # Auto Scaling configuration for read capacity
  ReadCapacityScalableTarget: 
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties: 
      MaxCapacity: 20
      MinCapacity: 5
      ResourceId: !Join
        - /
        - - table
          - !Ref KeyValueStore
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      ServiceNamespace: dynamodb
  ReadScalingPolicy: 
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties: 
      PolicyName: ReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration: 
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification: 
          PredefinedMetricType: DynamoDBReadCapacityUtilization
  
  # Auto Scaling configuration for write capacity
  WriteCapacityScalableTarget: 
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties: 
      MaxCapacity: 20
      MinCapacity: 5
      ResourceId: !Join
        - /
        - - table
          - !Ref KeyValueStore
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb
  WriteScalingPolicy: 
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties: 
      PolicyName: WriteScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration: 
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification: 
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
